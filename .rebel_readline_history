1579254763231:(defn grid [player1 player2]\n  (->> (range 1 10)\n       (map #(get-symbol % player1 player2))\n       (partition 3)\n       (mapv vec)\n       (mapv #(clojure.string/join "|" %))\n       (clojure.string/join "\\n---------\\n")\n       (println)))
1579254775812:(grid)
1579254781140:(defn get-symbol [move & players]\n  (reduce #(select-symbol move % %2) " " players))
1579254791076:(defn select-symbol [move default-symbol player]\n  (if (.contains (:moves player) move) (:symbol player) default-symbol))
1579254793348:(defn get-symbol [move & players]\n  (reduce #(select-symbol move % %2) " " players))
1579254796949:(defn grid [player1 player2]\n  (->> (range 1 10)\n       (map #(get-symbol % player1 player2))\n       (partition 3)\n       (mapv vec)\n       (mapv #(clojure.string/join "|" %))\n       (clojure.string/join "\\n---------\\n")\n       (println)))
1579254872825:(def player1 {:name :player1 :move #{1 2 3} :symbol :X})
1579254890025:(def player2 {:name :player2 :move #{4 5 6} :symbol :O})
1579254893448:player1
1579254896409:player2
1579254921088:(grid [player1 player2])
1579254925672:(grid player1 player2)
1579254941736:(def player2 {:name :player2 :moves #{4 5 6} :symbol :O})
1579254947656:(def player1 {:name :player1 :moves #{1 2 3} :symbol :X})
1579254949767:(grid player1 player2)
1579254962986:(def player2 {:name :player2 :moves #{4 5 6} :symbol "O"})
1579254969569:(def player1 {:name :player1 :moves #{1 2 3} :symbol "X"})
1579254972009:(grid player1 player2)
1579254986642:(defn grid [player1 player2]\n  (->> (range 1 10)\n       (map #(get-symbol % player1 player2))\n       (partition 3)\n       (mapv vec)\n       (mapv #(clojure.string/join "|" %))\n       (clojure.string/join "\\n------\\n")\n       (println)))
1579254989976:(grid player1 player2)
1579255237006:(require '[clojure.set :refer :all])\n\n(def winning-combs #{#{1 2 3} #{4 5 6} #{7 8 9} #{1 4 7} #{2 5 8} #{3 6 9} #{1 5 9} #{3 5 7}})\n\n(def symbols ["X" "O"])\n\n(defn won? [moves]\n  (some #(subset? % moves) winning-combs))\n\n(defn add-move [move player]\n  (conj player {:moves (conj (:moves player) move)}))\n\n(defn read-promt [promt]\n  (do (println promt) (read)))\n\n(defn ask-move [player]\n  (do (println (:name player) "'s move")\n      (read)))\n\n(defn ask-player []\n  (read-promt "Enter player name"))\n\n(defn get-player-detail [symbol]\n  {:name   (ask-player)\n   :moves  #{}\n   :symbol symbol})\n\n(defn get-player-details []\n  (vec (doall (map get-player-detail symbols))))\n\n(defn already-played? [move & players]\n  (some #(.contains (:moves %) move) players))\n\n(defn declare-winner [winner moves]\n  (println (:name winner) "has won with moves :" moves))\n\n(defn select-symbol [move default-symbol player]\n  (if (.contains (:moves player) move) (:symbol player) default-symbol))\n\n(defn get-symbol [move & players]\n  (reduce #(select-symbol move % %2) " " players))\n\n(defn grid [player1 player2]\n  (->> (range 1 10)\n       (map #(get-symbol % player1 player2))\n       (partition 3)\n       (mapv vec)\n       (mapv #(clojure.string/join "|" %))\n       (clojure.string/join "\\n------\\n")\n       (println)))\n\n(defn start [[current-player next-player]]\n  (grid current-player next-player)\n  (let [played-move (ask-move current-player)]\n    (if (already-played? played-move current-player next-player)\n      (recur [current-player next-player])\n      (if (won? (:moves (add-move played-move current-player)))\n        (declare-winner current-player (conj (:moves current-player) played-move))\n        (recur [next-player (add-move played-move current-player)])))))\n\n(defn play []\n  (start (get-player-details)))
1579255243033:(play)
1579255334745:(clojure.string/join "abc" "def")
1579255776954:(defn get-symbol [move & players]\n  (reduce #(select-symbol move % %2) " " players))
1579255798689:(get-symbol 3 player1 player2)
1579255804401:player1
1579255807360:player2
1579255820876:(defn get-symbol [move & players]\n  (reduce #(select-symbol move %) " " players))
1579255827187:(get-symbol 3 player1 player2)
1579255849138:(defn get-symbol [move & players]\n  (reduce #(select-symbol move % %2) " " players))
1579255851577:(get-symbol 3 player1 player2)
1579258004867:(->> (range 1 10))
1579258024090:(->> (range 1 16))
1579258029138:(->> (range 1 17))
1579258142193:(->> (range 1 (inc (* size size)))\n       (partition size)\n       (mapv vec))
1579258157954:(->> (range 1 17)\n       (partition 4)\n       (mapv vec))
1579258544530:(def grid (->> (range 1 (inc (* size size)))\n       (partition size)\n       (mapv vec)))
1579258554306:(->> (range 1 17)\n       (partition 4)\n       (mapv vec))
1579258567537:(def grid (->> (range 1 17)\n       (partition 4)\n       (mapv vec)))
1579258570040:grid
1579258909405:[ 0 0 2 2]
1579258918804:(def row [ 0 0 2 2])
1579258974602:(filter zero? row)
1579259012465:(compliment zero?)
1579259070336:(complement zero?)
1579259090248:(filter (complement zero?) row)
1579259137663:(partition-by even? [1 2 3 4 6 7 9 8])
1579259145741:(partition-by even? [1 2 3 4 6 8 7 9 8])
1579259157309:(filter (complement zero?) row)
1579259162725:row
1579259171807:(filter (complement zero?) row)
1579259204111:(partition-by (fn [x y] (= x y)) [1 2 3 4 6 8 7 9 8])
1579259222022:(partition-by = [1 2 3 4 6 8 7 9 8])
1579259377448:(partition-by identity row)
1579259382897:(filter (complement zero?) row)
1579259429847:(defn remove-zero [col] \n  (filter (complement zero?) col))
1579259444839:(remove-zero [1 2 3 0])
1579259517221:(defn partition-by-identity [col]\n  (partition-by identity col))
1579259523605:(partition-by-identity row)
1579259537092:(partition-by-identity (remove-zero row))
1579259561379:(map identity (partition-by-identity (remove-zero row)))
1579259592348:(map (reduce +) (partition-by-identity (remove-zero row)))
1579259613202:(map (partial reduce +) (partition-by-identity (remove-zero row)))
1579259623870:row
1579259652639:(conj 0 '(1 2 3))
1579259657727:(conj '(1 2 3) 0)
1579259811542:(defn a [x] (while (zero? x) (dec x))\n  )
1579259816189:(a 10)
1579259983176:(defn fill [x col] (if (= x (count col)) col (recur (dec x) (conj col 0))))
1579260003430:(fill 4 '(2 3))
1579260031632:(count '(2 3))
1579260053946:(defn fill [x col] (if (= x (count col)) col (recur x (conj col 0))))
1579260056442:(fill 4 '(2 3))
1579260111889:(defn remove-zero [col]\n  (filter (complement zero?) col))\n\n(defn partition-by-identity [col]\n  (partition-by identity col))\n\n(defn fill-with-zero [size col]\n  (if (= size (count col))\n    col\n    (recur size (conj col 0))))
1579260115295:row
1579260130119:(remove-zero row)
1579260142503:(partition-by-identity (remove-zero row))
1579260157422:(fill-with-zero (partition-by-identity (remove-zero row)))
1579260165956:(fill-with-zero 4 (partition-by-identity (remove-zero row)))
1579260172958:(partition-by-identity (remove-zero row))
1579260222111:(map (reduce +) (partition-by-identity (remove-zero row)))
1579260253654:(map (partial reduce +) (partition-by-identity (remove-zero row)))
1579260310804:(defn add-indentical [col]\n  (map (partial reduce +) col))
1579260317021:(partition-by-identity (remove-zero row))
1579260352820:(add-indentical (partition-by-identity (remove-zero row)))
1579260373930:row
1579260382906:(defn add-identical [col]\n  (map (partial reduce +) col))
1579260395899:(add-identical (partition-by-identity (remove-zero row)))
1579260411033:(fill-with-zero (add-identical (partition-by-identity (remove-zero row))))
1579260420009:(fill-with-zero 4 (add-identical (partition-by-identity (remove-zero row))))
1579260441153:(fill-with-zero 4 (add-identical (partition-by-identity (remove-zero [2 0 0 2]))))
1579260452200:(fill-with-zero 4 (add-identical (partition-by-identity (remove-zero [2 0 4 2]))))
1579260569077:(defn swap-and-add-identical [col]\n  (fill-with-zero 4 (add-identical (partition-by-identity (remove-zero col)))))
1579260588987:(swap-and-add-identical [ 0 0 2 2])
1579260834151:(defn remove-zero [col]\n  (filter (complement zero?) col))\n\n(defn partition-by-identity [col]\n  (partition-by identity col))\n\n(defn add-identical [col]\n  (map (partial reduce +) col))\n\n(defn fill-with-zero [size col]\n  (if (= size (count col))\n    col\n    (recur size (conj col 0))))\n\n(defn swap-and-add-identical [col]\n  (fill-with-zero 4 (add-identical (partition-by-identity (remove-zero col)))))\n\n(defn swap-right [cols]\n  (map swap-and-add-identical cols))
1579260851077:(swap-right grid)
1579260860452:grid
1579260938309:(def grid1 [[0 0 2 2] [0 2 0 2] [4 2 8 0] [0 2 2 4]])
1579260943258:(swap-right grid1)
1579261065648:(defn swap-left [cols]\n  (map reverse (map swap-and-add-identical (map reverse cols))))
1579261069640:grid1
1579261072544:grid
1579261110488:(swap-left grid1)
1579261264647:grid1
1579261273527:(def cols grid1)
1579261276814:cols
1579261701911:rows
1579261703999:ros
1579261706999:row
1579261730591:(take-nth 2 row)
1579261772415:row
1579261791078:(partition even? [1 2 3 4 6 8])
1579261801479:(partition-by even? [1 2 3 4 6 8])
1579261905335:(group-by even? [1 2 3 4 6 8])
1579261942531:(rem 4 9)
1579261965137:(group-by #(rem % 4) [1 2 3 4 6 8])
1579262017455:(0 (group-by #(rem % 4) [1 2 3 4 6 8]))
1579262024191:((group-by #(rem % 4) [1 2 3 4 6 8]) 0)
1579262072987:(flatten grid)
1579262075283:grid
1579262084447:grid1
1579262106110:((group-by #(rem % 4) grid1) 0)
1579262130150:((group-by #(rem % 4) (flatten grid1)) 0)
1579262136492:grid1
1579262164983:(flatten grid1)
1579262174584:(group-by #(rem % 4) (flatten grid1))
1579262552954:(flatten grid1)
1579262564874:(take-nth 1 (flatten grid1))
1579262574627:(take-nth 4 (flatten grid1))
1579262960371:(defn x [a b] (even? (+ a b)))
1579262969268:(take-nth 4 (flatten grid1))
1579262974019:grid1
1579262977699:grid
1579263019838:(group-by x (flatten grid1) grid)
1579263028371:grid
1579263034834:grid1
1579263048649:(group-by x (flatten grid1) (flatten grid))
1579263216345:(map (fn [x y] [x y]) (flatten grid1) (flatten grid))
1579263231497:(map (fn [x y] [x y]) (range 16) (flatten grid))
1579265125867:grid1
1579265317054:(defn rotate [cols] (map vector cols))
1579265324125:(rotate cols)
1579265341812:(rotate (flatten cols))
1579265355885:cols
1579265585815:(defn rotate [cols] (apply map vector cols))
1579265593695:grid1
1579265609458:(rotate grid1)
1579265653986:(rotate (rotate grid1))
1579265925426:grid1
1579265940011:(defn add-up [cols]\n  (rotate (map swap-and-add-identical (rotate cols))))
1579265953386:(add-up\n grid1)
1579265957706:(add-up grid1)
1579265992129:grid1
1579265998665:(defn add-up [cols]\n  (rotate (map swap-and-add-identical (rotate cols))))
1579266025368:(rotate grid1)
1579266108714:(map swap-and-add-identical (rotate grid1))
1579266132293:(rotate (map swap-and-add-identical (rotate grid1)))
1579266210747:(= grid1 (rotate grid1))
1579266214683:grid1
1579266227379:(rotate grid1)
1579266243740:(rotate (rotate grid1))
1579266265925:(rotate (rotate (map swap-and-add-identical (rotate grid1))))
1579266271940:grid1
1579266344809:(rotate (map swap-and-add-identical (rotate grid1)))
1579266529214:grid1
1579266531510:grid
1579266579470:(->> grid1\n     (mapv vec)\n       (mapv #(str/join pipe-separator %))\n       (str/join "\\n------\\n")\n       (println)))
1579266595796:(require '[clojure.set :refer :all]\n         '[clojure.string :as str])
1579266598285:(->> grid1\n     (mapv vec)\n       (mapv #(str/join pipe-separator %))\n       (str/join "\\n------\\n")\n       (println)))
1579266602549:(->> grid1\n     (mapv vec)\n       (mapv #(str/join pipe-separator %))\n       (str/join "\\n------\\n")\n       (println))
1579266607540:(->> grid1\n     (mapv vec)\n       (mapv #(str/join pipe-separator %))\n       (str/join "\\n------\\n")\n       (println)\n     )
1579266621664:(->> grid1\n     (mapv vec)\n       (mapv #(str/join "|" %))\n       (str/join "\\n------\\n")\n       (println)\n     )
1579266691138:(defn draw [grid]\n  (->> grid\n       (mapv vec)\n       (mapv #(str/join "|" %))\n       (str/join "\\n------\\n")\n       (println)\n       ))
1579266700016:(draw grid1)
1579266729435:(defn draw [grid]\n  (->> grid\n       (mapv vec)\n       (mapv #(str/join "|" %))\n       (str/join "\\n------\\n")\n       (println)\n       "G-R-I-D"\n       ))
1579266732794:(draw grid1)
1579266831817:(defn play [grid]\n  (draw grid)\n  (recur grid))
1579266839271:(play grid)
1579266862844:(defn play [grid]\n  (do (draw grid))\n  (recur grid))
1579266865763:(play grid)
1579266868404:(play grid1)
1579266909942:(draw grid1)
1579266917207:(defn draw [grid]\n  (->> grid\n       (mapv vec)\n       (mapv #(str/join "|" %))\n       (str/join "\\n------\\n")\n       (println)))
1579266920182:(draw grid1)
1579266927647:(defn play [grid]\n  (do (draw grid))\n  (recur grid))
1579266933094:(play grid1)
1579267056209:(case mystr\n        "" 0\n        "hello" (count mystr)\n        "default")
1579267065246:(case ""\n        "" 0\n        "hello" (count mystr)\n        "default")
1579267076942:(case ""\n        "" 0\n        "hello" (count "mystr")\n        "default")
1579267085205:(case "hello"\n        "" 0\n        "hello" (count "mystr")\n        "default")
1579267095477:(case "hdfjslfello"\n        "" 0\n        "hello" (count "mystr")\n        "default")
1579267172013:(case ""\n        "" (+ 2 2)\n        "hello" (count "mystr")\n        "default")
1579267273948:(defn play-move [command]\n  (case 'command\n    1 (+ 2 2)\n    2 (* 3 4)))
1579267282506:(play-move 1)
1579267305066:(defn play-move [command]\n  (case 'command\n    1 (+ 2 2)\n    2 (* 3 4)\n    4))
1579267308128:(play-move 1)
1579267703921:(let [x (+ 2 2) y x] (println x y))
1579267748486:(defn remove-zero [col]\n  (filter (complement zero?) col))\n\n(defn partition-by-identity [col]\n  (partition-by identity col))\n\n(defn add-identical [col]\n  (map (partial reduce +) col))\n\n(defn fill-with-zero [size col]\n  (if (= size (count col))\n    col\n    (recur size (conj col 0))))\n\n(defn swap-and-add-identical [col]\n  (fill-with-zero 4 (add-identical (partition-by-identity (remove-zero col)))))\n\n(defn swap-right [cols]\n  (map swap-and-add-identical cols))\n\n(defn swap-left [cols]\n  (map reverse (map swap-and-add-identical (map reverse cols))))\n\n(defn rotate [cols] (apply map vector cols))\n\n(defn add-down [cols]\n  (rotate (map swap-and-add-identical (rotate cols))))\n\n(defn add-up [cols]\n  (map reverse (rotate (map swap-and-add-identical (map reverse (rotate cols))))))\n\n(defn draw [grid]\n  (->> grid\n       (mapv vec)\n       (mapv #(str/join "|" %))\n       (str/join "\\n------\\n")\n       (println)))\n\n(defn play-move [command grid]\n  (case 'command\n    1 (swap-right grid)\n    2 (swap-left grid)\n    3 (add-down grid)\n    (add-up grid)))\n\n(defn play [grid]\n  (let [action (ask-action) next-grid (play-move action grid)]\n    (do (draw next-grid))\n    (recur next-grid)))
1579267822360:(defn remove-zero [col]\n  (filter (complement zero?) col))\n\n(defn partition-by-identity [col]\n  (partition-by identity col))\n\n(defn add-identical [col]\n  (map (partial reduce +) col))\n\n(defn fill-with-zero [size col]\n  (if (= size (count col))\n    col\n    (recur size (conj col 0))))\n\n(defn swap-and-add-identical [col]\n  (fill-with-zero 4 (add-identical (partition-by-identity (remove-zero col)))))\n\n(defn swap-right [cols]\n  (map swap-and-add-identical cols))\n\n(defn swap-left [cols]\n  (map reverse (map swap-and-add-identical (map reverse cols))))\n\n(defn rotate [cols] (apply map vector cols))\n\n(defn add-down [cols]\n  (rotate (map swap-and-add-identical (rotate cols))))\n\n(defn add-up [cols]\n  (map reverse (rotate (map swap-and-add-identical (map reverse (rotate cols))))))\n\n(defn draw [grid]\n  (->> grid\n       (mapv vec)\n       (mapv #(str/join "|" %))\n       (str/join "\\n------\\n")\n       (println)))\n\n(defn play-move [command grid]\n  (case 'command\n    1 (swap-right grid)\n    2 (swap-left grid)\n    3 (add-down grid)\n    (add-up grid)))\n\n\n(defn read-promt [msg]\n  (do (println msg) (read)))\n\n\n(defn ask-action []\n  (read-promt "Enter some command\\n"))\n\n(defn play [grid]\n  (let [action (ask-action) next-grid (play-move action grid)]\n    (do (draw next-grid))\n    (recur next-grid)))
1579267831207:(play grid1)
1579267838993:grid1
1579267999786:(def grid1 [[0 0 2 2] [0 2 0 2] [4 2 8 0] [0 2 2 4]])
1579268008746:(play grid1)
1579268051129:(defn play [grid]\n  (let [action (ask-action) next-grid (play-move action grid)]\n    (do\n      (println next-grid)\n      (draw next-grid))\n    (recur next-grid)))
1579268054496:(play grid1)
1579268094493:(defn play [grid]\n  (let [action (ask-action) next-grid (play-move action grid)]\n    (do\n      (println next-grid)\n      (draw (mapv vec next-grid)))\n    (recur next-grid)))
1579268097108:(play grid1)
1579268125169:(draw grid1)
1579268129490:grid1
1579268139250:(defn draw [grid]\n  (->> grid\n       (mapv vec)\n       (mapv #(str/join "|" %))\n       (str/join "\\n------\\n")\n       (println)))
1579268171384:(require '[clojure.string :as str])
1579268172761:(defn draw [grid]\n  (->> grid\n       (mapv vec)\n       (mapv #(str/join "|" %))\n       (str/join "\\n------\\n")\n       (println)))
1579268180296:(draw grid1)
1579268188911:(play grid1)
1579268278771:(require '[clojure.string :as str])\n\n(defn remove-zero [col]\n  (filter (complement zero?) col))\n\n(defn partition-by-identity [col]\n  (partition-by identity col))\n\n(defn add-identical [col]\n  (map (partial reduce +) col))\n\n(defn fill-with-zero [size col]\n  (if (= size (count col))\n    col\n    (recur size (conj col 0))))\n\n(defn swap-and-add-identical [col]\n  (fill-with-zero 4 (add-identical (partition-by-identity (remove-zero col)))))\n\n(defn swap-right [cols]\n  (map swap-and-add-identical cols))\n\n(defn swap-left [cols]\n  (map reverse (map swap-and-add-identical (map reverse cols))))\n\n(defn rotate [cols] (apply map vector cols))\n\n(defn add-down [cols]\n  (rotate (map swap-and-add-identical (rotate cols))))\n\n(defn add-up [cols]\n  (map reverse (rotate (map swap-and-add-identical (map reverse (rotate cols))))))\n\n(defn draw [grid]\n  (->> grid\n       (mapv vec)\n       (mapv #(str/join "|" %))\n       (str/join "\\n------\\n")\n       (println)))\n\n(defn play-move [command grid]\n  (case 'command\n    1 (swap-right grid)\n    2 (swap-left grid)\n    3 (add-down grid)\n    (add-up grid)))\n\n\n(defn read-promt [msg]\n  (do (println msg) (read)))\n\n\n(defn ask-action []\n  (read-promt "Enter some command\\n"))\n\n(defn play [grid]\n  (let [action (ask-action) next-grid (play-move action grid)]\n    (draw (mapv vec next-grid))\n    (recur next-grid)))
1579268283517:(play)
1579268304999:(def grid1 [[0 0 2 2] [0 2 0 2] [4 2 8 0] [0 2 2 4]])
1579268316468:(play grid1)
1579268425217:(require '[clojure.string :as str])\n\n(defn remove-zero [col]\n  (filter (complement zero?) col))\n\n(defn partition-by-identity [col]\n  (partition-by identity col))\n\n(defn add-identical [col]\n  (map (partial reduce +) col))\n\n(defn fill-with-zero [size col]\n  (if (= size (count col))\n    col\n    (recur size (conj col 0))))\n\n(defn swap-and-add-identical [col]\n  (fill-with-zero 4 (add-identical (partition-by-identity (remove-zero col)))))\n\n(defn swap-right [cols]\n  (map swap-and-add-identical cols))\n\n(defn swap-left [cols]\n  (map reverse (map swap-and-add-identical (map reverse cols))))\n\n(defn rotate [cols] (apply map vector cols))\n\n(defn add-down [cols]\n  (rotate (map swap-and-add-identical (rotate cols))))\n\n(defn add-up [cols]\n  (map reverse (rotate (map swap-and-add-identical (map reverse (rotate cols))))))\n\n(defn draw [grid]\n  (->> grid\n       (mapv vec)\n       (mapv #(str/join "|" %))\n       (str/join "\\n------\\n")\n       (println)))\n\n(defn play-move [command grid]\n  (case 'command\n    1 (do (println "move all to right") (swap-right grid))\n    2 (do (println "move all to left") (swap-left grid))\n    3 (do (println "move all to down")) (add-down grid)\n    (do (println "move all to up") (add-up grid))))\n\n\n(defn read-promt [msg]\n  (do (println msg) (read)))\n\n\n(defn ask-action []\n  (read-promt "Enter some command\\n"))\n\n(defn play [grid]\n  (let [action (ask-action) next-grid (play-move action grid)]\n    (draw (mapv vec next-grid))\n    (recur next-grid)))\n\n(def grid1 [[0 0 2 2] [0 2 0 2] [4 2 8 0] [0 2 2 4]])
1579268434322:(play grid1)
1579268469692:(defn play-move [command grid]\n  (case 'command\n    1 (do (println "move all to right") (swap-right grid))\n    2 (do (println "move all to left") (swap-left grid))\n    3 (do (println "move all to down") (add-down grid))\n    (do (println "move all to up") (add-up grid))))
1579268472528:(play grid1)
1579268703501:(require '[clojure.string :as str])\n\n(defn remove-zero [col]\n  (filter (complement zero?) col))\n\n(defn partition-by-identity [col]\n  (partition-by identity col))\n\n(defn add-identical [col]\n  (map (partial reduce +) col))\n\n(defn fill-with-zero [size col]\n  (if (= size (count col))\n    col\n    (recur size (conj col 0))))\n\n(defn swap-and-add-identical [col]\n  (fill-with-zero 4 (add-identical (partition-by-identity (remove-zero col)))))\n\n(defn swap-right [cols]\n  (map swap-and-add-identical cols))\n\n(defn swap-left [cols]\n  (map reverse (map swap-and-add-identical (map reverse cols))))\n\n(defn rotate [cols] (apply map vector cols))\n\n(defn add-down [cols]\n  (rotate (map swap-and-add-identical (rotate cols))))\n\n(defn add-up [cols]\n  (map reverse (rotate (map swap-and-add-identical (map reverse (rotate cols))))))\n\n(defn draw [grid]\n  (println grid)\n  (->> grid\n       (mapv vec)\n       (mapv #(str/join "|" %))\n       (str/join "\\n------\\n")\n       (println)))\n\n(defn play-move [command grid]\n  (case 'command\n    1 (do (println "move all to right") (swap-right grid))\n    2 (do (println "move all to left") (swap-left grid))\n    3 (do (println "move all to down") (add-down grid))\n    (do (println "move all to up") (add-up grid))))\n\n\n(defn read-promt [msg]\n  (do (println msg) (read)))\n\n\n(defn ask-action []\n  (read-promt "Enter some command\\n"))\n\n(defn play [grid]\n  (let [action (ask-action) next-grid (play-move action grid)]\n    (draw (mapv vec next-grid))\n    (recur next-grid)))\n\n(def grid1 [[0 0 2 2] [0 2 0 2] [4 2 8 0] [0 2 2 4]])
1579268712566:(play grid1)
1579268852308:(require '[clojure.string :as str])\n\n(defn remove-zero [col]\n  (filter (complement zero?) col))\n\n(defn partition-by-identity [col]\n  (partition-by identity col))\n\n(defn add-identical [col]\n  (map (partial reduce +) col))\n\n(defn fill-with-zero [size col]\n  (if (= size (count col))\n    col\n    (recur size (conj col 0))))\n\n(defn swap-and-add-identical [col]\n  (fill-with-zero 4 (add-identical (partition-by-identity (remove-zero col)))))\n\n(defn swap-right [cols]\n  (map swap-and-add-identical cols))\n\n(defn swap-left [cols]\n  (map reverse (map swap-and-add-identical (map reverse cols))))\n\n(defn rotate [cols] (apply map vector cols))\n\n(defn add-down [cols]\n  (rotate (map swap-and-add-identical (rotate cols))))\n\n(defn add-up [cols]\n  (map reverse (rotate (map swap-and-add-identical (map reverse (rotate cols))))))\n\n(defn draw [grid action]\n  (println grid action)\n  (->> grid\n       (mapv vec)\n       (mapv #(str/join "|" %))\n       (str/join "\\n------\\n")\n       (println)))\n\n(defn play-move [command grid]\n  (case 'command\n    1 (do (println "move all to right") (swap-right grid))\n    2 (do (println "move all to left") (swap-left grid))\n    3 (do (println "move all to down") (add-down grid))\n    (do (println "move all to up") (add-up grid))))\n\n\n(defn read-promt [msg]\n  (do (println msg) (read)))\n\n\n(defn ask-action []\n  (read-promt "Enter some command\\n"))\n\n(defn play [grid]\n  (let [action (ask-action) next-grid (play-move action grid)]\n    (draw (mapv vec next-grid) action)\n    (recur next-grid)))\n\n(def grid1 [[0 0 2 2] [0 2 0 2] [4 2 8 0] [0 2 2 4]])
1579268861147:(play grid1)
1579268968391:(require '[clojure.string :as str])\n\n(defn remove-zero [col]\n  (filter (complement zero?) col))\n\n(defn partition-by-identity [col]\n  (partition-by identity col))\n\n(defn add-identical [col]\n  (map (partial reduce +) col))\n\n(defn fill-with-zero [size col]\n  (if (= size (count col))\n    col\n    (recur size (conj col 0))))\n\n(defn swap-and-add-identical [col]\n  (fill-with-zero 4 (add-identical (partition-by-identity (remove-zero col)))))\n\n(defn swap-right [cols]\n  (map swap-and-add-identical cols))\n\n(defn swap-left [cols]\n  (map reverse (map swap-and-add-identical (map reverse cols))))\n\n(defn rotate [cols] (apply map vector cols))\n\n(defn add-down [cols]\n  (rotate (map swap-and-add-identical (rotate cols))))\n\n(defn add-up [cols]\n  (map reverse (rotate (map swap-and-add-identical (map reverse (rotate cols))))))\n\n(defn draw [grid action]\n  (println grid action)\n  (->> grid\n       (mapv vec)\n       (mapv #(str/join "|" %))\n       (str/join "\\n------\\n")\n       (println)))\n\n(defn play-move [command grid]\n  (case 'command\n    1 (do (println "move all to right") (swap-right grid))\n    2 (do (println "move all to left") (swap-left grid))\n    3 (do (println "move all to down") (add-down grid))\n    (do (println "move all to up") (add-up grid))))\n\n\n(defn read-promt [msg]\n  (do (println msg) (read)))\n\n\n(defn ask-action []\n  (read-promt "Enter some command\\n"))\n\n(defn play [grid]\n  (let [action (ask-action) next-grid (play-move action grid)]\n    (draw (mapv vec next-grid) action)\n    (recur next-grid)))\n\n(def grid1 [[0 0 2 2] [0 2 0 2] [4 2 8 0] [0 2 2 4]])
1579268980320:(play grid1)
1579269041748:(defn play-move [command grid]\n  (case 'command\n    1 (do (println "move all to right") (swap-right grid))\n    2 (do (println "move all to left") (swap-left grid))\n    3 (do (println "move all to down") (add-down grid))\n    (do (println "move all to up") (add-up grid))))
1579269048358:(require '[clojure.string :as str])\n\n(defn remove-zero [col]\n  (filter (complement zero?) col))\n\n(defn partition-by-identity [col]\n  (partition-by identity col))\n\n(defn add-identical [col]\n  (map (partial reduce +) col))\n\n(defn fill-with-zero [size col]\n  (if (= size (count col))\n    col\n    (recur size (conj col 0))))\n\n(defn swap-and-add-identical [col]\n  (fill-with-zero 4 (add-identical (partition-by-identity (remove-zero col)))))\n\n(defn swap-right [cols]\n  (map swap-and-add-identical cols))\n\n(defn swap-left [cols]\n  (map reverse (map swap-and-add-identical (map reverse cols))))\n\n(defn rotate [cols] (apply map vector cols))\n\n(defn add-down [cols]\n  (rotate (map swap-and-add-identical (rotate cols))))\n\n(defn add-up [cols]\n  (map reverse (rotate (map swap-and-add-identical (map reverse (rotate cols))))))\n\n(defn draw [grid action]\n  (println grid action)\n  (->> grid\n       (mapv vec)\n       (mapv #(str/join "|" %))\n       (str/join "\\n------\\n")\n       (println)))\n\n(defn play-move [command grid]\n  (case 'command\n    1 (do (println "move all to right") (swap-right grid))\n    2 (do (println "move all to left") (swap-left grid))\n    3 (do (println "move all to down") (add-down grid))\n    (do (println "move all to up") (add-up grid))))\n\n\n(defn read-promt [msg]\n  (do (println msg) (read)))\n\n\n(defn ask-action []\n  (read-promt "Enter some command\\n"))\n\n(defn play [grid]\n  (let [action (ask-action) next-grid (play-move action grid)]\n    (draw (mapv vec next-grid) action)\n    (recur next-grid)))\n\n(def grid1 [[0 0 2 2] [0 2 0 2] [4 2 8 0] [0 2 2 4]])
1579269067412:(play-move 1 grid1)
1579269074675:(play-move 2 grid1)
1579269087187:(defn play-move [command grid]\n  (case command\n    1 (do (println "move all to right") (swap-right grid))\n    2 (do (println "move all to left") (swap-left grid))\n    3 (do (println "move all to down") (add-down grid))\n    (do (println "move all to up") (add-up grid))))
1579269090274:(play-move 2 grid1)
1579269094515:(play-move 1 grid1)
1579269103401:(play grid1)
1579524734144:*1
1579524739927:*0
1579524755558:(println "Hello")
1579524758039:*1
1579524774614:(*)
1579524777720:(*')
1579524785214:(*1)
1579524805885:"Hello"
1579524810765:*1
1579524970674:(reductions + [1 2 3 4 5 6])
1579524991406:(map vec [[1 2 3] [4 5 6]])
1579525001915:(map vec [1 2 3] [4 5 6])
1579525028618:(map vec (1 2 3) (4 5 6))
1579525045459:(map + [1 2 3] [4 5 6])
1579525052691:(map vec [1 2 3] [4 5 6])
1579525058514:(vec 1 2)
1579525062955:(vector 1 2)
1579525069274:(map vector [1 2 3] [4 5 6])
1579525113746:(for [i (range 10)] (println i))
1579525121953:(for [i (range 10)] i)
1579525138050:(for [i (range 10) j (range 10)] [i j])
1579525196747:(vec (for [i (range 10) j (range 10)] [i j]))
1579525207259:((vec (for [i (range 10) j (range 10)] [i j])) 20)
1579525216610:(count (vec (for [i (range 10) j (range 10)] [i j])))
1579525227794:(vec (for [i (range 10) j (range 10)] [i j]))
1579525297286:(vec (for [i (range 10) j (range 10)] (* i j)))
1579525316876:(filter zero? (vec (for [i (range 10) j (range 10)] [i j])))
1579525322464:(vec (for [i (range 10) j (range 10)] (* i j)))
1579525340030:(for [i (range 10) j (range 10)] [i j])
1579570987336:(assoc {:a 1} :b 3)
1579570991400:(assoc {:a 1} :a 3)
